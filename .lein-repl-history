(def re-close-bracket #"[\]\)]")
(def re-comma #",")
(def re-comment #";.*$")
(def re-decimal #"[0-9]+")
(def re-hexadecimal #"0(?i)x[0-9a-fA-F]+")
(def re-instruction #"dat|^set|^add|^sub|^mul|^div|^mod|^shl|^shr|^and|^bor|^xor|^ife|^ifn|^ifg|^ifb|^jsr")
(def re-label-ref #"[a-zA-Z0-9_]+")
(def re-label #":\w+")
(def re-open-bracket #"[\[\(]")
(def re-plus #"\+")
(def re-register #"a|b|c|x|y|z|i|j|pop|push|peek|pc|sp|o")
(def re-string #"\"(\"|[^\"])*\"")
(def re-whitespace #"(\r\n|\s+)")
(defn match? [re-str word] (re-find (re-pattern (str "^" re-str)) word)) 
(defn tok-type [[tok re-str] word] (when (match? re-str word) tok))
(match? re-comma ",")
(tok-type [:comma re-comma] ",")
(def tok-types { :close-bracket re-close-bracket,
:comma re-comma,
:comment re-comment,
:decimal re-decimal,
:hexadecimal re-hexadecimal,
:instruction re-instruction,
:label-ref re-label-ref,
:label re-label,
:open-bracket re-open-bracket,
:plus re-plus,
:register re-register,
:string re-string,
:whitespace re-whitespace})
 (filter #(match? % ",") tok-types)
(def tok-types { :closebracket re-close-bracket,
:comma re-comma,
:comment re-comment,
:decimal re-decimal,
:hexadecimal re-hexadecimal,
:instruction re-instruction,
:labelref re-label-ref,
:label re-label,
:openbracket re-open-bracket,
:plus re-plus,
:register re-register,
:string re-string,
:whitespace re-whitespace})
 (filter #(match? % ",") tok-types)
(require ' dcpu16_clojure.core reload)
(require ' dcpu16_clojure.core :reload)
(require 'dcpu16_clojure.core :reload)
(require 'dcpu16_clojure.core)
(require 'dcpu16_clojure.core :reload)
ll
(token "a")
(require 'dcpu16_clojure.core :reload)
(-main)
(require 'dcpu16_clojure.core :reload)
(-main)
(require 'dcpu16_clojure.core :reload)
(-main)
(require 'dcpu16_clojure.core :reload)
(ns dcpu16-clojure.core)
(token "a")
(consume-word "set a,10")
(token "a")
(consume-word "set a,10")
(ns dcpu16-clojure.core)
(require 'dcpu16_clojure.core :reload)
(consume-word "set a,10")
(token "a")
(token "set")
(require 'dcpu16_clojure.core :reload)
(token "set")
(ns dcpu16-clojure.core)
(token "set")
(consume-word "set a,10")
(token (consume-word "set a,10"))
(token consume-word (token (consume-word "set a,10")))
(token (consume-word (token (consume-word "set a,10")))
)
(token (consume-word (token (consume-word "set a,10")))
)
(token (consume-word (token (consume-word "set a,10"))))
(consume-word (token (consume-word "set a,10")))
(token (consume-word "set a,10"))
(match? re-whitespace " ")
(require 'dcpu16_clojure.core :reload)
(match? re-whitespace " ")
(match? re-whitespace "")
(match? re-whitespace "  ")
(match? re-whitespace "a")
(match? re-whitespace " ")
(require 'dcpu16_clojure.core :reload)
(match? re-whitespace "a")
(match? re-whitespace " ")
(require 'dcpu16_clojure.core :reload)
(match? re-whitespace " ")
(nth (match? re-whitespace " ") 0)
(nth (match? re-whitespace "a") 0)
(nth (match? re-whitespace " ") 0)
(match? re-whitespace " ")
(require 'dcpu16_clojure.core :reload)
(match? re-whitespace " ")
(consume-word (token (consume-word "set a,10")))
(match? re-whitespace " ")
(consume-word (token (consume-word "set a,10")))
(token (consume-word "set a,10"))
(consume-word (token (consume-word "set a,10")))
(consume-word (nth (token (consume-word "set a,10"))) 1)
(consume-word (nth (token (consume-word "set a,10"))1))
(token (consume-word (nth (token (consume-word "set a,10"))1)))
(consume-word (token (consume-word "set a,10")))
(token (consume-word "set a,10"))
(token "set a,10")
(consume-word (token "set a,10"))
(consume-word "set a,10")
(require 'dcpu16_clojure.core :reload)
(consume-word "set a,10")
(consume-token "set a,10")
(require 'dcpu16_clojure.core :reload)
(consume-token (token "set a,10") "set a,10")
(require 'dcpu16_clojure.core :reload)
(consume-word "set a,10")
(require 'dcpu16_clojure.core :reload)
(consume-word "set a,10")
(ns dcpu16-clojure.core)
(consume-word "set a,10")
(require 'dcpu16_clojure.core :reload)
(consume-word "set a,10")
(require 'dcpu16_clojure.core :reload)
(consume-word "set a,10")
(require 'dcpu16_clojure.core :reload)
(consume-word "set a,10")
(require 'dcpu16_clojure.core :reload)
(consume-word "set a,10")
(require 'dcpu16_clojure.core :reload)
(tokenize-line "Set a, 0x10")
(require 'dcpu16_clojure.core :reload)
(tokenize-line "Set a, 0x10")
(require 'dcpu16_clojure.core :reload)
(ns dcpu16-clojure.core)
(tokenize-line "Set a, 0x10")
(require 'dcpu16_clojure.core :reload)
(ns dcpu16-clojure.core)
(tokenize-line "Set a, 0x10")
(require 'dcpu16_clojure.core :reload)
(ns dcpu16-clojure.core)
(tokenize-line "Set a, 0x10")
(require 'dcpu16_clojure.core :reload)
(tokenize-line "Set a, 0x10")
(require 'dcpu16_clojure.core :reload)
(tokenize-line "Set a, 0x10")
(require 'dcpu16_clojure.core :reload)
(tokenize-line "Set a, 0x10")
(require 'dcpu16_clojure.core :reload)
(tokenize-line "Set a, 0x10")
(require 'dcpu16_clojure.core :reload)
(tokenize-line "Set a, 0x10")
(require 'dcpu16_clojure.core :reload)
(tokenize-line "Set a, 0x10")
(require 'dcpu16_clojure.core :reload)
(tokenize-line "Set a, 0x10")
(require 'dcpu16_clojure.core :reload)
(tokenize-line "Set a, 0x10")
(require 'dcpu16_clojure.core :reload)
(tokenize-line "Set a, 0x10")
(require 'dcpu16_clojure.core :reload)
(tokenize-line "Set a, 0x10")
(load core.clj)
(load "core.clj")
(load "core.clj")#
(load "core.clj")
(load-file "core.clj")
(load "core.clj")
(load "src/core.clj")
(load "./src/core.clj")
(load "./src/dcpu16_clojure/core.clj")
(load "/home/pedro/src/github/DCPU16-Clojure/src/dcpu16_clojure/core.clj")
(load "/home/pedro/src/github/DCPU16-Clojure/src/dcpu16_clojure/core")
(load-file "/home/pedro/src/github/DCPU16-Clojure/src/dcpu16_clojure/core")
(load-file "core.clj")
(load-file "/home/pedro/src/github/DCPU16-Clojure/src/dcpu16_clojure/core.clj")
